<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:ui="clr-namespace:Unclassified.UI"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="LicenseManager.Resources.FlatStyle"
	x:ClassModifier="public">

	<!-- There need to be at least two styles if StartupUri is not used. -->
	<!-- See http://bengribaudo.com/blog/2010/08/19/106/bug-single-application-resources-entry-ignored -->
	<Style x:Key="__unused"/>

	<!-- region Colour table -->

	<SolidColorBrush x:Key="FlatDefaultBackground">#f4f4f4</SolidColorBrush>
	<SolidColorBrush x:Key="FlatHoveredBackground">#fafafa</SolidColorBrush>
	<SolidColorBrush x:Key="FlatPressedBackground">#e8e8e8</SolidColorBrush>
	<SolidColorBrush x:Key="FlatDisabledBackground">#ffffff</SolidColorBrush>

	<SolidColorBrush x:Key="FlatDefaultBorder">#b0b0b0</SolidColorBrush>
	<SolidColorBrush x:Key="FlatHoveredBorder">#808080</SolidColorBrush>
	<SolidColorBrush x:Key="FlatFocusedBorder">#81b2ff</SolidColorBrush>
	<SolidColorBrush x:Key="FlatPressedBorder">#808080</SolidColorBrush>
	<SolidColorBrush x:Key="FlatDisabledBorder">#c8c8c8</SolidColorBrush>

	<!-- All colours with lightness - 8 to compensate the circle rendering opacity loss in RadioButton -->
	<SolidColorBrush x:Key="FlatRoundDefaultBorder">#a8a8a8</SolidColorBrush>
	<SolidColorBrush x:Key="FlatRoundHoveredBorder">#787878</SolidColorBrush>
	<SolidColorBrush x:Key="FlatRoundFocusedBorder">#71a8ff</SolidColorBrush>
	<SolidColorBrush x:Key="FlatRoundPressedBorder">#787878</SolidColorBrush>
	<SolidColorBrush x:Key="FlatRoundDisabledBorder">#c0c0c0</SolidColorBrush>

	<!-- endregion Colour table -->

	<!-- region Button -->

	<Style TargetType="Button">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Background" Value="{StaticResource FlatDefaultBackground}"/>
		<Setter Property="Foreground" Value="#000000"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="Padding" Value="5,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}"
						Padding="{TemplateBinding Padding}"
						CornerRadius="0"
						SnapsToDevicePixels="True">
						<ContentControl
							x:Name="PART_content"
							VerticalAlignment="Center" HorizontalAlignment="Center"
							Focusable="False"
							Content="{TemplateBinding Content}"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_content" Property="Opacity" Value="0.35"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="0.5 1.5"/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsDefault" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatPressedBorder}"/>
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource FlatHoveredBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{StaticResource FlatPressedBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatPressedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{StaticResource FlatDisabledBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="CallToActionButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Background" Value="#007bf2"/>
		<Setter Property="Foreground" Value="#ffffff"/>
		<Setter Property="BorderBrush" Value="#0070dc"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="#0066c8"/>
				<Setter Property="BorderBrush" Value="#005fbc"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="#0051a0"/>
				<Setter Property="BorderBrush" Value="#0051a0"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="#a9cef1"/>
				<Setter Property="Foreground" Value="#000000"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- endregion Button -->

	<!-- region ToggleButton -->

	<Style TargetType="ToggleButton">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Background" Value="{StaticResource FlatDefaultBackground}"/>
		<Setter Property="Foreground" Value="#000000"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="#c0c0c0"/>
		<Setter Property="Padding" Value="5,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}"
						Padding="{TemplateBinding Padding}"
						CornerRadius="0"
						SnapsToDevicePixels="True">
						<ContentControl Content="{TemplateBinding Content}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="0.5 1.5"/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource FlatHoveredBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{StaticResource FlatPressedBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatPressedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{StaticResource FlatDisabledBackground}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
				<Setter Property="Foreground" Value="#808080"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="CallToActionToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
		<Setter Property="Background" Value="#317dff"/>
		<Setter Property="Foreground" Value="#ffffff"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="6,4"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="#0561ff"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="#0055e8"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- endregion ToggleButton -->

	<!-- region TextBox -->

	<DrawingBrush x:Key="DisabledTextBoxBrush" TileMode="Tile" Viewbox="0,0,20,20" ViewboxUnits="Absolute" Viewport="0,0,10,10" ViewportUnits="Absolute">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<GeometryDrawing Brush="White">
					<GeometryDrawing.Geometry>
						<RectangleGeometry Rect="0,0,20,20"/>
					</GeometryDrawing.Geometry>
				</GeometryDrawing>
				<GeometryDrawing>
					<GeometryDrawing.Geometry>
						<LineGeometry StartPoint="0,20" EndPoint="20,0"/>
					</GeometryDrawing.Geometry>
					<GeometryDrawing.Pen>
						<Pen Thickness="7" Brush="#f8f8f8"/>
					</GeometryDrawing.Pen>
				</GeometryDrawing>
				<GeometryDrawing>
					<GeometryDrawing.Geometry>
						<LineGeometry StartPoint="20,-20" EndPoint="-20,20"/>
					</GeometryDrawing.Geometry>
					<GeometryDrawing.Pen>
						<Pen Thickness="7" Brush="#f8f8f8"/>
					</GeometryDrawing.Pen>
				</GeometryDrawing>
				<GeometryDrawing>
					<GeometryDrawing.Geometry>
						<LineGeometry StartPoint="40,0" EndPoint="0,40"/>
					</GeometryDrawing.Geometry>
					<GeometryDrawing.Pen>
						<Pen Thickness="7" Brush="#f8f8f8"/>
					</GeometryDrawing.Pen>
				</GeometryDrawing>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<Style TargetType="TextBox">
		<Setter Property="Background" Value="#ffffff"/>
		<Setter Property="Foreground" Value="#000000"/>
		<!-- Remove hover colour: http://stackoverflow.com/a/4876783/143684 -->
		<Setter Property="BorderThickness" Value="1.000001"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="Padding" Value="1,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Border
						Name="Bd"
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="true">
						<ScrollViewer
							Name="PART_ContentHost"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
		<Style.Resources>
			<ui:ValidationErrorConverter x:Key="ValidationErrorConverter"/>
		</Style.Resources>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{StaticResource DisabledTextBoxBrush}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
				<Setter Property="Foreground" Value="#808080"/>
			</Trigger>
			<Trigger Property="Validation.HasError" Value="True">
				<Setter Property="UIElement.Effect">
					<Setter.Value>
						<DropShadowEffect BlurRadius="6" Color="#ff2000" ShadowDepth="0"/>
					</Setter.Value>
				</Setter>
				<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource ValidationErrorConverter}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- endregion TextBox -->

	<!-- region PasswordBox -->

	<Style TargetType="PasswordBox">
		<Setter Property="Background" Value="#ffffff"/>
		<Setter Property="Foreground" Value="#000000"/>
		<!-- Remove hover colour: http://stackoverflow.com/a/4876783/143684 -->
		<Setter Property="BorderThickness" Value="1.000001"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="Padding" Value="1,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="PasswordBox">
					<Border
						Name="Bd"
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="true">
						<ScrollViewer
							Name="PART_ContentHost"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
			</Trigger>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{StaticResource DisabledTextBoxBrush}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
				<Setter Property="Foreground" Value="#808080"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- endregion PasswordBox -->

	<!-- region ComboBox -->

	<!-- Based on: http://msdn.microsoft.com/en-us/library/ms752094%28v=vs.100%29.aspx -->
	<!-- Improved with original triggers from Expression Blend -->
	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>

			<Border
				x:Name="Bd"
				Grid.ColumnSpan="2"
				BorderThickness="1"
				BorderBrush="{StaticResource FlatDefaultBorder}"
				Background="{StaticResource FlatDefaultBackground}"/>
			<Border Margin="1" Background="Transparent"/>
			<Path
				x:Name="Arrow"
				Grid.Column="1"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Data="M0,0 L0,2 L3,5 L6,2 L6,0 L3,3 Z"
				Fill="#444444"/>
		</Grid>

		<ControlTemplate.Triggers>
			<DataTrigger
				Binding="{Binding (ComboBox.IsFocused), RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, FallbackValue=False}"
				Value="True">
				<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
			</DataTrigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Bd" Property="Background" Value="{StaticResource FlatHoveredBackground}"/>
				<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource FlatPressedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Arrow" Property="Fill" Value="#afafaf"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
	</ControlTemplate>

	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="MinWidth" Value="40"/>
		<Setter Property="MinHeight" Value="20"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<ToggleButton
							x:Name="ToggleButton"
							Template="{StaticResource ComboBoxToggleButton}"
							Focusable="False"
							ClickMode="Press"
							IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
						<ContentPresenter
							x:Name="ContentSite"
							IsHitTestVisible="False"
							Content="{TemplateBinding SelectionBoxItem}"
							ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							Margin="4,3,23,3"
							VerticalAlignment="Stretch"
							HorizontalAlignment="Left"/>
						<TextBox
							x:Name="PART_EditableTextBox"
							Style="{x:Null}"
							Template="{StaticResource ComboBoxTextBox}"
							VerticalAlignment="Center"
							HorizontalAlignment="Stretch"
							Margin="2,3,23,3"
							Focusable="True"
							Background="Transparent"
							Visibility="Hidden"
							IsReadOnly="{TemplateBinding IsReadOnly}"/>
						<Popup
							x:Name="PART_Popup"
							Placement="Bottom"
							IsOpen="{TemplateBinding IsDropDownOpen}"
							AllowsTransparency="True"
							Focusable="False"
							PopupAnimation="None"
							VerticalOffset="-1">
							<!-- Use overlay positioning: Opened="ComboBox_Popup_Opened" -->

							<Grid
								x:Name="DropDown"
								SnapsToDevicePixels="True"
								Margin="8"
								MinWidth="{TemplateBinding ActualWidth}"
								MaxHeight="{TemplateBinding MaxDropDownHeight}">
								<!-- Disable scrollbar: MaxHeight="{TemplateBinding MaxDropDownHeight}" -->
								<Grid.BitmapEffect>
									<DropShadowBitmapEffect Direction="270" ShadowDepth="1" Softness="0.2" Opacity="0.3" Color="Black"/>
								</Grid.BitmapEffect>

								<Border x:Name="DropDownBorder" BorderThickness="1" BorderBrush="#808080" Background="White"/>
								<ScrollViewer Margin="1" SnapsToDevicePixels="True">
									<StackPanel x:Name="PopupItems" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
								</ScrollViewer>
							</Grid>
						</Popup>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames
											Storyboard.TargetName="PART_EditableTextBox"
											Storyboard.TargetProperty="(TextElement.Foreground).Color">
											<EasingColorKeyFrame KeyTime="0" Value="#808080"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames
											Storyboard.TargetName="PART_EditableTextBox"
											Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames
											Storyboard.TargetName="ContentSite"
											Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Uneditable"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="0.5 1.5"/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
		<Style.Resources>
			<ui:ValidationErrorConverter x:Key="ValidationErrorConverter"/>
		</Style.Resources>
		<Style.Triggers>
			<Trigger Property="Validation.HasError" Value="True">
				<Setter Property="UIElement.Effect">
					<Setter.Value>
						<DropShadowEffect BlurRadius="6" Color="#ff2000" ShadowDepth="0"/>
					</Setter.Value>
				</Setter>
				<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors), Converter={StaticResource ValidationErrorConverter}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type ComboBoxItem}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border
						x:Name="Bd"
						Padding="2,2"
						SnapsToDevicePixels="True"
						Background="Transparent">
						<ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="#add6ff"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- endregion ComboBox -->

	<!-- region CheckBox -->

	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="Background" Value="#ffffff"/>
		<Setter Property="Foreground" Value="#000000"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<BulletDecorator Background="Transparent" SnapsToDevicePixels="True">
						<BulletDecorator.Bullet>
							<Border
								x:Name="Border"
								Width="14" Height="14"
								Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
								<Grid>
									<Path
										x:Name="CheckMark"
										Width="10" Height="10"
										HorizontalAlignment="Center" VerticalAlignment="Center"
										Data="M0.3,5 L3.5,8 L9.7,2"
										Stroke="#000000" StrokeThickness="1.5" Stretch="None"/>
									<Border
										x:Name="CheckMark3"
										Width="6" Height="6"
										HorizontalAlignment="Center" VerticalAlignment="Center"
										Background="#505050"/>
								</Grid>
							</Border>
						</BulletDecorator.Bullet>
						<ContentPresenter
							Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="CheckMark3" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="CheckMark3" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource FlatHoveredBorder}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{StaticResource FlatPressedBackground}"/>
							<Setter Property="BorderBrush" Value="{StaticResource FlatPressedBorder}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
							<Setter TargetName="CheckMark" Property="Stroke" Value="#808080"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="HasContent" Value="True">
							<Setter Property="Padding" Value="5,0,0,0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- endregion CheckBox -->

	<!-- region RadioButton -->

	<Style TargetType="{x:Type RadioButton}">
		<Setter Property="Background" Value="#ffffff"/>
		<Setter Property="Foreground" Value="#000000"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatRoundDefaultBorder}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="Transparent" SnapsToDevicePixels="True">
						<BulletDecorator.Bullet>
							<Grid>
								<Ellipse
									Width="15" Height="15"
									Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1">
								</Ellipse>
								<Ellipse
									x:Name="CheckMark"
									Width="7" Height="7"
									HorizontalAlignment="Center" VerticalAlignment="Center"
									Fill="#c0000000"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter
							Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource FlatRoundHoveredBorder}"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" Value="{StaticResource FlatRoundFocusedBorder}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{StaticResource FlatPressedBackground}"/>
							<Setter Property="BorderBrush" Value="{StaticResource FlatRoundPressedBorder}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="BorderBrush" Value="{StaticResource FlatRoundDisabledBorder}"/>
							<Setter TargetName="CheckMark" Property="Stroke" Value="#808080"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="HasContent" Value="True">
							<Setter Property="Padding" Value="5,0,0,0"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- endregion RadioButton -->

	<!-- region ListView -->

	<Style TargetType="ListView">
		<Setter Property="Background" Value="#ffffff"/>
		<Setter Property="Foreground" Value="#000000"/>
		<!-- Remove hover colour: http://stackoverflow.com/a/4876783/143684 -->
		<Setter Property="BorderThickness" Value="1.000001"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="UseLayoutRounding" Value="True"/>
		<Setter Property="ui:ListViewLayoutManager.Enabled" Value="True"/>
		<Style.Triggers>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="BorderBrush" Value="{StaticResource FlatFocusedBorder}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="#e8e8e8"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
				<Setter Property="Foreground" Value="#808080"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollViewer">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<DockPanel Margin="{TemplateBinding Padding}">
							<ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False">
								<GridViewHeaderRowPresenter
									Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
									AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>

							<ScrollContentPresenter Name="PART_ScrollContentPresenter"
								KeyboardNavigation.DirectionalNavigation="Local"
								CanContentScroll="True"
								CanHorizontallyScroll="False"
								CanVerticallyScroll="False"/>
						</DockPanel>

						<ScrollBar Name="PART_HorizontalScrollBar"
							Orientation="Horizontal"
							Grid.Row="1"
							Maximum="{TemplateBinding ScrollableWidth}"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Value="{TemplateBinding HorizontalOffset}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

						<ScrollBar Name="PART_VerticalScrollBar"
							Grid.Column="1"
							Maximum="{TemplateBinding ScrollableHeight}"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Value="{TemplateBinding VerticalOffset}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	</Style>

	<Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Width" Value="12"/>
		<Setter Property="Background" Value="White"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="Transparent">
						<Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="GridViewColumnHeader">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GridViewColumnHeader">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="HeaderBorder" Storyboard.TargetProperty="Background.Color">
											<EasingColorKeyFrame KeyTime="0" Value="#dddddd"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed"/>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="HeaderBorder" BorderBrush="{StaticResource FlatDefaultBorder}" BorderThickness="0" Background="#eeeeee" Padding="6,2,6,2">
							<ContentPresenter x:Name="HeaderContent"
								Margin="0,0,0,1"
								RecognizesAccessKey="True"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<Thumb x:Name="PART_HeaderGripper"
							HorizontalAlignment="Right"
							Margin="0,0,-6,0"
							Style="{StaticResource GridViewColumnHeaderGripper}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Role" Value="Floating">
				<Setter Property="Opacity" Value="0.7"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="GridViewColumnHeader">
							<Canvas Name="PART_FloatingHeaderCanvas">
								<Rectangle Fill="#60000000" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"/>
							</Canvas>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="Padding">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="GridViewColumnHeader">
							<Border Name="HeaderBorder" BorderThickness="0,1,0,1"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="GridViewColumnHeader" x:Key="NoclickGridViewColumnHeaderStyle" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
		<Setter Property="IsHitTestVisible" Value="False"/>
	</Style>
	<!-- Style used for right-most columns -->
	<!-- The last GridViewColumnHeader needs to compensate an additional 4px wide invisible column -->
	<Style TargetType="GridViewColumnHeader" x:Key="LastGridViewColumnHeaderStyle" BasedOn="{StaticResource {x:Type GridViewColumnHeader}}">
		<Setter Property="FrameworkElement.Margin" Value="0,0,-4,0"/>
	</Style>
	<Style TargetType="GridViewColumnHeader" x:Key="LastNoclickGridViewColumnHeaderStyle" BasedOn="{StaticResource LastGridViewColumnHeaderStyle}">
		<Setter Property="IsHitTestVisible" Value="False"/>
	</Style>

	<Style TargetType="ListViewItem">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle Margin="0,1,0,0" StrokeThickness="1" Stroke="Black" StrokeDashArray="0.5 1.5"/>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<Border x:Name="Border" Margin="0,1,0,0" Padding="0,2" SnapsToDevicePixels="True" Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver"/>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="#add6ff"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedUnfocused">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="#f4f4f4"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- endregion ListView -->

	<!-- region ProgressBar -->

	<Style TargetType="{x:Type ProgressBar}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Foreground" Value="#01D328"/>
		<Setter Property="Background" Value="{StaticResource FlatDefaultBackground}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{StaticResource FlatDefaultBorder}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Determinate"/>
								<VisualState x:Name="Indeterminate">
									<Storyboard RepeatBehavior="Forever">
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
											<EasingDoubleKeyFrame KeyTime="00:00:00" Value="2"/>
										</DoubleAnimationUsingKeyFrames>
										<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
											<EasingPointKeyFrame KeyTime="00:00:00" Value="1,0.5"/>
											<EasingPointKeyFrame KeyTime="00:00:40" Value="0,0.5"/>
										</PointAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2"/>
						<Rectangle x:Name="PART_Track" Margin="1"/>
						<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
							<Grid x:Name="Foreground">
								<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
								<Rectangle x:Name="Animation" Opacity="0.5" RenderTransformOrigin="0.5,0.5">
									<Rectangle.Fill>
										<DrawingBrush TileMode="Tile" Viewbox="0,0,10,10" ViewboxUnits="Absolute" Viewport="0,0,10,20" ViewportUnits="Absolute">
											<DrawingBrush.Drawing>
												<GeometryDrawing>
													<GeometryDrawing.Geometry>
														<PathGeometry Figures="M-5,5 L5,-5 M-5,15 L15,-5 M5,15 L15,5"/>
													</GeometryDrawing.Geometry>
													<GeometryDrawing.Pen>
														<Pen Thickness="3.5" Brush="{Binding Fill, ElementName=Indicator}"/>
													</GeometryDrawing.Pen>
												</GeometryDrawing>
											</DrawingBrush.Drawing>
										</DrawingBrush>
									</Rectangle.Fill>
									<Rectangle.RenderTransform>
										<TransformGroup>
											<ScaleTransform/>
											<SkewTransform/>
											<RotateTransform/>
											<TranslateTransform/>
										</TransformGroup>
									</Rectangle.RenderTransform>
								</Rectangle>
							</Grid>
						</Decorator>
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="LayoutTransform" TargetName="TemplateRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="True">
							<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="False">
							<Setter Property="Visibility" TargetName="Animation" Value="Collapsed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- endregion ProgressBar -->

	<!-- region ListBox -->

	<Style TargetType="ListBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border
						Name="Bd"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True"
						Padding="0">
						<ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{StaticResource DisabledTextBoxBrush}"/>
				<Setter Property="BorderBrush" Value="{StaticResource FlatDisabledBorder}"/>
				<Setter Property="Foreground" Value="#808080"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="ListBoxItem">
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#e4e4e4"/>
		</Style.Resources>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="#08000000"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- endregion ListBox -->
</ResourceDictionary>
